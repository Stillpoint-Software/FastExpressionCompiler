<Project Sdk="Microsoft.NET.Sdk">
    <PropertyGroup>
        <TargetFrameworks Condition=" '$(LEGACYCI)' != 'true' ">net472;netstandard2.0;netstandard2.1;net6.0;net8.0;net9.0</TargetFrameworks>
        <TargetFrameworks Condition=" '$(LEGACYCI)' == 'true' ">net472;netstandard2.0;netstandard2.1;net6.0;net8.0</TargetFrameworks>

        <VersionPrefix>4.2.2</VersionPrefix>
        <VersionSuffix></VersionSuffix>

        <Product>FastExpressionCompiler.LightExpression</Product>

        <PackageId>$(Product)</PackageId>
        <Title>$(Product)</Title>
        <Description>FastExpressionCompiler for LightExpression is 10-40x times faster than Expression.Compile()</Description>
        <PackageTags>Performance;Expression;ExpressionTree;Compile;DynamicMethod;IL;ILEmit;DryIoc;ExpressionToCodeLib</PackageTags>
        <PackageReleaseNotes><![CDATA[
## v4.2.2 Bug-fix release

- fix: #418 Wrong output when comparing NaN value  
- fix: #419 System.InvalidProgramException : The JIT compiler encountered invalid IL code or an internal limitation
- fix: #420 Nullable<DateTime> comparison differs from Expression.Compile
- fix: #421 Date difference is giving wrong negative value
- fix: #422 [bug] InvalidProgramException when having TryCatch + Default in Catch
- fix: #423 Converting a uint to a float gives the wrong result


## v4.2.1 Feature and bug-fix release

- fix: ImTools should disable the nullable context
- fix: nullable property
- fix: Incorrect il for struct indexer
- fix: Fix or support return ref value
- fix: Incorrect il when passing by ref value

## Contributors

* @sebastienros made contribution in https://github.com/dadhi/FastExpressionCompiler/pull/412

## Full Changelog

https://github.com/dadhi/FastExpressionCompiler/compare/v4.2.0...v4.2.1


## v4.2.0 Feature and bug-fix release

- feat: #133 Optimize Switch Expression
- feat: #393 Support ToCSharpString of the block in the ternary expression
- feat: #396 Optimize conditional expressions with the DefaultExpression left or right operand the same way as ConstantExpression

- fix: #390 System.AccessViolationException when mapping using Mapster
- fix: #391 ToCSharpString outputs ? for Nullable which does not produce the compile-able code
- fix: #392 ToExpressionString wrongly declares Label instead of LabelTarget array
- fix: #394 Calling a user defined == operator runs into a CLR invalid program exception
- fix: #397 Fix and optimize the Switch support
- fix: #399 Coalesce nullable with 0 is not working
- fix: #400 Fix the direct assignment of Try to Member expression because indirect assignment through tmp var works
- fix: #401 Invoke inlining is not working with collections in AutoMapper tests
- fix: #404 An expression with a single parameter concatenated to a string causes 'Exception has been thrown by the target of an invocation' during delegate invocation
- fix: #405 NullReferenceException with V4.X when using long?[]
- fix: #406 NullReferenceException with V4.X
- fix: #407 NullReferenceException when setting the Enum field
- fix: #408 Dictionary mapping failing when the InvocationExpression inlining is involved


## v4.0.2 Bug-fix release

- added: #379 Add direct net8.0 target as soon as Appveyor CI will support it
- fixed: #380 Comparisons with nullable types
- fixed: #381 NullReferenceException with V4.X when trying to map
- fixed: #386 Value can not be null(parametr 'meth')


## v4.0.1 Bug-fix release

- fixed: #374 CompileFast doesn't work with HasFlag

## v4.0.0 Major release

- fixed: #352 xxxAssign doesn't work with MemberAccess
- fixed: #353 NullReferenceException when calling CompileFast() results
- fixed: #357 Invalid program exception
- fixed: #366 FastExpressionCompiler[v3.3.4] gives incorrect results in some linq operations
- fixed: #368 Fix duplicate nested lambda compilation
- fixed: #374 CompileFast doesn't work with HasFlag

- added: #264 Optimize the array index emit to emit specific Ldelem_ code instead of generic Ldelem
- added: #273 Implement IArgumentProvider for the BlockExpression to minimize the consumed memory
- added: #346 Is it possible to implement ref local variables?
- added: #359 Improve the performance of variable lookup
- added: #367 Better diagnostics and debugging with error codes from Collect and Compile rounds
- added: #369 Decrease memory occupied by the LightExpression Block by storing Expression in SmallList (partly on stack)
- added: #370 Optimize any nested lambda compilation (LINQ) by compiling right after collect one-by-one
- added: #372 Support LightExpression.Expression.TryConvertDelegateIntrinsic for converting one type of delegate to another
- added: #373 Support custom C# printing for the LightExpression.Expression

        ]]>        </PackageReleaseNotes>

        <AssemblyName>$(Product)</AssemblyName>
        <AssemblyTitle>$(Product) $(TargetFramework)</AssemblyTitle>
        <AssemblyVersion>$(VersionPrefix)</AssemblyVersion>
        <IsTrimmable>true</IsTrimmable>

        <DefineConstants>LIGHT_EXPRESSION</DefineConstants>
    </PropertyGroup>
    <ItemGroup>
        <Compile Include="..\FastExpressionCompiler\FastExpressionCompiler.cs"/>
        <Compile Include="..\FastExpressionCompiler\ImTools.cs"/>
    </ItemGroup>
    <ItemGroup Condition=" '$(TargetFramework)' == 'netstandard2.0' ">
        <PackageReference Include="System.Reflection.Emit.Lightweight" Version="4.7.0"/>
        <PackageReference Include="System.Dynamic.Runtime" Version="4.3.0"/>
    </ItemGroup>
</Project>
